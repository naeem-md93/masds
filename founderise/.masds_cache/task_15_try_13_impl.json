{"reasoning": "The task requires writing tests for the LLM microservice routes using Jest. Based on the PRD, the functionality of the LLM microservice includes adding LLM configurations and verifying the health of the service. A health check route is present in 'health.js' and an 'addLLM' function in 'addLLM.js'. I will write tests for these functionalities in 'src/microservices/llm/tests/llmRoutes.test.js' file using Jest along with Supertest for API testing. I will automate the process to install Jest, Supertest, handle npm cache issues, ensure dependencies align correctly, and optimize test timeout issues using a sensible Jest configuration, based on validator comments. Finally, I will execute the test file to validate functionality.", "implementation": ["#!/usr/bin/env bash", "set -euo pipefail", "", "# Define the branch name", "BRANCH=\"b16/llm-test-routes\"", "", "# Ensure script is executed in a git repository", "if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then", "  echo \"\u274c Error: Script must be run inside a Git repository.\" >&2", "  exit 1", "fi", "", "# Handle branch creation or switching", "if git rev-parse --verify \"$BRANCH\" > /dev/null 2>&1; then", "  git checkout \"$BRANCH\"", "else", "  git checkout -b \"$BRANCH\"", "fi", "", "# Navigate to the LLM microservice directory", "cd src/microservices/llm", "", "# Fix npm cache issues and clean up", "npm cache clean --force || true", "rm -rf node_modules package-lock.json", "", "# Install necessary dependencies for testing", "npm install --save-dev jest supertest @babel/preset-env", "", "# Create a configuration for Jest (if not already present)", "cat << 'EOF' > jest.config.js", "module.exports = {", "  testEnvironment: 'node',", "  testTimeout: 30000,", "};", "EOF", "", "# Create the test file for LLM routes", "mkdir -p tests", "cat << 'EOF' > tests/llmRoutes.test.js", "const request = require('supertest');", "const express = require('express');", "const addLLM = require('../routes/addLLM');", "const health = require('../routes/health');", "", "const app = express();", "app.use(express.json());", "app.use(addLLM);", "app.use(health);", "", "describe('LLM Microservice API Tests', () => {", "  test('Health check endpoint returns healthy status', async () => {", "    const response = await request(app).get('/health');", "    expect(response.status).toBe(200);", "    expect(response.body.status).toBe('LLM Microservice is healthy');", "  });", "", "  test('Add LLM endpoint adds configuration successfully', async () => {", "    const llmConfig = { name: 'TestLLM', apiKey: 'dummyApiKey', endpoint: 'https://example.com' };", "    const response = await request(app).post('/addLLM').send(llmConfig);", "    expect(response.status).toBe(201);", "    expect(response.body.message).toBe('LLM configuration added successfully');", "    expect(response.body.data).toEqual(llmConfig);", "  });", "", "  test('Add LLM endpoint returns error for missing fields', async () => {", "    const llmConfig = { name: 'TestLLM' };", "    const response = await request(app).post('/addLLM').send(llmConfig);", "    expect(response.status).toBe(400);", "    expect(response.body.error).toBe('Missing required fields: name, apiKey, endpoint');", "  });", "});", "EOF", "", "# Run Jest tests", "npx jest tests/llmRoutes.test.js --runInBand", "", "echo '\u2705 Task complete.'"]}