{"reasoning": "The task involves creating tests for the 'src/microservices/llm/tests/llmRoutes.test.js' file using Jest, to validate the LLM microservice API routes. The plan entails setting up the environment correctly (including any necessary dependencies), creating API tests for the LLM routes, and ensuring they run within an expected time frame without performance bottlenecks. Since the file does not yet exist, the Bash script will first create the test file. Additionally, the script will ensure the Jest testing framework and 'supertest' library are installed, clean potential cache issues that may interfere with running tests, and finally run the tests, reporting any errors if they exist.", "implementation": ["#!/usr/bin/env bash", "set -euo pipefail", "", "# Ensure we switch to the right branch or create it if it doesn't exist", "git checkout b16/llm-test-routes || git checkout -b b16/llm-test-routes", "", "# Ensure the project is a git repository", "if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then", "  echo 'Error: Not inside a Git repository. Ensure the script is run inside the project root.'", "  exit 1", "fi", "", "# Install necessary dependencies: jest for testing, supertest for API testing", "npm install --save-dev jest supertest", "", "# Clean npm cache to resolve potential install inconsistencies", "npm cache clean --force || true", "", "# Resolve existing node_modules cache conflicts if any", "[[ -d node_modules ]] && rm -rf node_modules && npm install", "", "# Ensure the test file directory exists", "mkdir -p src/microservices/llm/tests", "", "# Write the Jest test file for LLM routes", "cat << 'EOF' > src/microservices/llm/tests/llmRoutes.test.js", "const request = require('supertest');", "const express = require('express');", "const addLLMRouter = require('../routes/addLLM');", "", "// Create an Express app instance and register the router", "const app = express();", "app.use(express.json());", "app.use(addLLMRouter);", "", "describe('LLM API Tests', () => {", "  test('GET /health should return healthy status', async () => {", "    const response = await request(app).get('/health');", "    expect(response.status).toBe(200);", "    expect(response.body).toEqual({ status: 'LLM Microservice is healthy' });", "  });", "", "  test('POST /addLLM should add a new LLM configuration', async () => {", "    const llmData = { name: 'TestLLM', apiKey: 'test-api-key', endpoint: 'https://test.endpoint' };", "    const response = await request(app)", "      .post('/addLLM')", "      .send(llmData);", "    expect(response.status).toBe(201);", "    expect(response.body).toEqual({", "      message: 'LLM configuration added successfully',", "      data: llmData", "    });", "  });", "", "  test('POST /addLLM should return 400 for missing fields', async () => {", "    const incompleteData = { name: 'TestLLM' };", "    const response = await request(app)", "      .post('/addLLM')", "      .send(incompleteData);", "    expect(response.status).toBe(400);", "    expect(response.body).toEqual({ error: 'Missing required fields: name, apiKey, endpoint' });", "  });", "});", "EOF", "", "# Add a test script to package.json if it doesn't exist", "if ! grep -q '\"test\":' package.json; then", "  sed -i \"s/\\\"scripts\\\": {/&\\n    \\\"test\\\": \\\"jest\\\",/\" package.json", "fi", "", "# Run Jest tests (limit workers to handle resource contention issues)", "npx jest src/microservices/llm/tests/llmRoutes.test.js --maxWorkers=2 --testTimeout=30000", "", "echo '\u2705 Task complete.'"]}