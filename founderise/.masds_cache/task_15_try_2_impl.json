{"reasoning": "The task is to write Jest tests for the LLM microservice APIs, which include routes located in 'src/microservices/llm/routes/'. First, ensure that dependencies such as Jest are installed. Next, create a test file at 'src/microservices/llm/tests/llmRoutes.test.js'. Use 'supertest' and Jest to implement test cases for the health check and /addLLM routes, verifying success and error responses. This implementation is idempotent and ensures proper coverage of the declared LLM routes.", "implementation": ["#!/usr/bin/env bash", "set -euo pipefail", "", "# Install necessary dependencies for testing", "npm install --save-dev jest supertest", "", "# Clear npm cache to avoid 'Tracker idealTree already exists' error", "npm cache clean --force || true", "", "# Ensure 'src/microservices/llm/tests/' directory exists", "mkdir -p src/microservices/llm/tests/", "", "# Write Jest test file for LLM routes", "cat << 'EOF' > src/microservices/llm/tests/llmRoutes.test.js", "const request = require('supertest');", "const express = require('express');", "const bodyParser = require('body-parser');", "const llmRouter = require('../routes/addLLM');", "", "const app = express();", "app.use(bodyParser.json());", "app.use(llmRouter);", "", "describe('LLM Microservice Routes', () => {", "  // Test the health check route", "  it('should return healthy status for /health', async () => {", "    const res = await request(app).get('/health');", "    expect(res.status).toBe(200);", "    expect(res.body).toEqual({", "      status: 'LLM Microservice is healthy'", "    });", "  });", "", "  // Test the /addLLM route with valid payload", "  it('should add a new LLM configuration successfully', async () => {", "    const payload = {", "      name: 'Test LLM',", "      apiKey: '12345',", "      endpoint: 'http://test-llm.com'", "    };", "    const res = await request(app).post('/addLLM').send(payload);", "    expect(res.status).toBe(201);", "    expect(res.body).toEqual({", "      message: 'LLM configuration added successfully',", "      data: payload", "    });", "  });", "", "  // Test the /addLLM route with invalid payload", "  it('should return 400 for missing fields in /addLLM', async () => {", "    const payload = { name: 'Incomplete LLM' };", "    const res = await request(app).post('/addLLM').send(payload);", "    expect(res.status).toBe(400);", "    expect(res.body).toEqual({", "      error: 'Missing required fields: name, apiKey, endpoint'", "    });", "  });", "});", "EOF", "", "# Run Jest tests to validate the implementation", "npx jest src/microservices/llm/tests/llmRoutes.test.js --passWithNoTests", "", "echo '\u2705 Task complete.'"]}