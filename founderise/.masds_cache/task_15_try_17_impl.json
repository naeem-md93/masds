{"reasoning": "To implement the task, I will create a test file for the LLM microservice APIs to ensure their endpoints function correctly as per the PRD. This will involve writing tests with Jest and Supertest to verify endpoints in `src/microservices/llm/routes/`, such as adding a new LLM and health check functionality. The script will also ensure that Jest and Supertest are installed as dev dependencies, and all tests will be executed. Dependency installation is automated with flags to bypass user prompts, and previous issues like cache-related errors and timeouts are preemptively handled.", "implementation": ["#!/usr/bin/env bash", "set -euo pipefail", "", "# Set up the branch (handle existing branch case)", "git checkout b16/llm-test-routes || git checkout -b b16/llm-test-routes", "", "# Ensure dependencies are installed without any prompts", "npm cache clean --force || true", "rm -rf node_modules", "npm install --silent --yes", "npm install jest supertest --save-dev --silent --yes", "", "# Create the test file with Jest and Supertest setup", "mkdir -p src/microservices/llm/tests", "cat << 'EOF' > src/microservices/llm/tests/llmRoutes.test.js", "const request = require('supertest');", "const express = require('express');", "const addLLMRouter = require('../routes/addLLM');", "const healthRouter = require('../routes/health');", "", "// Initialize the test app", "const app = express();", "app.use(express.json());", "app.use(addLLMRouter);", "app.use(healthRouter);", "", "describe('LLM Microservice API Routes', () => {", "  describe('Health Check Route', () => {", "    it('should return a healthy status', async () => {", "      const res = await request(app).get('/health');", "      expect(res.statusCode).toBe(200);", "      expect(res.body).toHaveProperty('status', 'LLM Microservice is healthy');", "    });", "  });", "", "  describe('Add LLM Route', () => {", "    it('should successfully add a new LLM configuration', async () => {", "      const newLLM = {", "        name: 'Sample LLM',", "        apiKey: 'dummyApiKey123',", "        endpoint: 'http://example.com/api',", "      };", "", "      const res = await request(app).post('/addLLM').send(newLLM);", "      expect(res.statusCode).toBe(201);", "      expect(res.body).toHaveProperty('message', 'LLM configuration added successfully');", "      expect(res.body).toHaveProperty('data');", "      expect(res.body.data).toMatchObject(newLLM);", "    });", "", "    it('should return 400 for missing required fields', async () => {", "      const invalidLLM = { name: '', apiKey: '', endpoint: '' };", "      const res = await request(app).post('/addLLM').send(invalidLLM);", "      expect(res.statusCode).toBe(400);", "      expect(res.body).toHaveProperty('error', 'Missing required fields: name, apiKey, endpoint');", "    });", "  });", "});", "EOF", "", "# Run the tests while preemptively increasing Jest timeout to mitigate timeouts", "NODE_OPTIONS=--max-old-space-size=4096 npx jest src/microservices/llm/tests/llmRoutes.test.js --testTimeout=60000 --maxWorkers=2", "", "echo '\u2705 Task complete.'"]}