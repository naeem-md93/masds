{"reasoning": "The task requires tests to be written for the LLM microservice routes. The goal is to ensure API routes in the LLM microservice function correctly. These tests will be implemented using Jest inside the specified `src/microservices/llm/tests/llmRoutes.test.js` file. The test cases will include sample requests and assertions for endpoints like health checks and adding LLM configurations. A Bash script will be created to safely establish a new file (if it doesn't exist), write the test logic, and optionally run the test suite to verify the implementation.", "implementation": ["#!/usr/bin/env bash", "set -euo pipefail", "", "# Ensure required directory exists", "mkdir -p src/microservices/llm/tests", "", "# Create Jest test file for LLM routes", "cat << 'EOF' > src/microservices/llm/tests/llmRoutes.test.js", "const request = require('supertest');", "const express = require('express');", "const llmRoutes = require('../routes/addLLM');", "", "describe('LLM Microservice Routes Tests', () => {", "  let app;", "", "  beforeAll(() => {", "    app = express();", "    app.use(express.json());", "    app.use(llmRoutes);", "  });", "", "  // Test health endpoint", "  test('GET /health - should respond with status 200 and proper health message', async () => {", "    const healthRouter = require('../routes/health');", "    app.use(healthRouter);", "    const response = await request(app).get('/health');", "    expect(response.status).toBe(200);", "    expect(response.body).toHaveProperty('status', 'LLM Microservice is healthy');", "  });", "", "  // Test addLLM POST endpoint", "  test('POST /addLLM - should add new LLM configuration and return 201 status', async () => {", "    const llmData = { name: 'TestLLM', apiKey: 'test-key', endpoint: 'https://example.com/api' };", "    const response = await request(app).post('/addLLM').send(llmData);", "    expect(response.status).toBe(201);", "    expect(response.body).toHaveProperty('message', 'LLM configuration added successfully');", "    expect(response.body.data).toMatchObject(llmData);", "  });", "", "  // Test addLLM POST endpoint with missing fields", "  test('POST /addLLM - should return 400 status for missing required fields', async () => {", "    const incompleteData = { name: 'TestLLM' };", "    const response = await request(app).post('/addLLM').send(incompleteData);", "    expect(response.status).toBe(400);", "    expect(response.body).toHaveProperty('error', 'Missing required fields: name, apiKey, endpoint');", "  });", "});", "EOF", "", "# Install dependencies if necessary", "if ! npm ls jest supertest express >/dev/null 2>&1; then", "  echo 'Installing Jest, Supertest, and Express...';", "  npm install --save-dev jest supertest express", "fi", "", "# Run the tests using Jest", "echo 'Running Jest tests...';", "npx jest src/microservices/llm/tests/llmRoutes.test.js", "", "echo '\u2705 Task complete.'"]}