{"reasoning": "The task involves writing tests for LLM microservice API routes in the provided test file using Jest. The steps will include ensuring Jest and other test dependencies like 'supertest' are installed, validating existing route functionalities, and implementing tests for those routes. Specific attention will be given to the LLM endpoints such as '/health' and '/addLLM', as defined in the routes folder.", "implementation": ["#!/usr/bin/env bash", "set -euo pipefail", "", "# Navigate to the root directory", "cd $(dirname \"$0\")/../../..", "", "# Check out or create the required branch", "git checkout b16/llm-test-routes || git checkout -b b16/llm-test-routes", "", "# Ensure dependencies are fully installed and clean the environment", "rm -rf node_modules", "npm cache clean --force", "npm install --legacy-peer-deps --yes", "", "# Install Jest and Supertest for testing", "npm install --save-dev jest supertest", "", "# Set up Jest configuration if not already present", "if [ ! -f jest.config.js ]; then", "  cat << 'EOF' > jest.config.js", "module.exports = {", "  testEnvironment: 'node',", "  transform: {},", "};", "EOF", "fi", "", "# Write the test cases for LLM routes", "mkdir -p src/microservices/llm/tests", "cat << 'EOF' > src/microservices/llm/tests/llmRoutes.test.js", "const request = require('supertest');", "const express = require('express');", "const llmRoutes = require('../routes/addLLM');", "const healthRoutes = require('../routes/health');", "", "const app = express();", "app.use(express.json());", "app.use(llmRoutes);", "app.use(healthRoutes);", "", "describe('LLM Microservice API Routes', () => {", "  test('GET /health should return healthy status', async () => {", "    const response = await request(app).get('/health');", "    expect(response.statusCode).toBe(200);", "    expect(response.body).toEqual({ status: 'LLM Microservice is healthy' });", "  });", "  ", "  test('POST /addLLM with valid data should return success', async () => {", "    const requestBody = {", "      name: 'TestLLM',", "      apiKey: 'test-key',", "      endpoint: 'http://test-endpoint.com'", "    };", "    const response = await request(app).post('/addLLM').send(requestBody);", "    expect(response.statusCode).toBe(201);", "    expect(response.body).toEqual({", "      message: 'LLM configuration added successfully',", "      data: requestBody", "    });", "  });", "  ", "  test('POST /addLLM with missing fields should return error', async () => {", "    const requestBody = { name: 'TestLLM' };", "    const response = await request(app).post('/addLLM').send(requestBody);", "    expect(response.statusCode).toBe(400);", "    expect(response.body).toHaveProperty('error', 'Missing required fields: name, apiKey, endpoint');", "  });", "});", "EOF", "", "# Run the tests using Jest", "npx jest src/microservices/llm/tests/llmRoutes.test.js --testTimeout=20000", "", "echo '\u2705 Task complete.'"]}